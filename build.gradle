plugins {
    id 'java'
}

def peachMainClass = 'nl.windesheim.ictm2o.peach.Main'

group 'nl.windesheim.ictm2o'
version '1.0'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation 'org.json:json:20220320'

    // https://mavenlibs.com/maven/dependency/com.miglayout/miglayout
    implementation 'com.miglayout:miglayout:3.7.4'
}

test {
    useJUnitPlatform()
}

task generateJava(type:Copy) {
    def templateContext = [version: project.version]
    inputs.properties templateContext // for gradle up-to-date check
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand templateContext
}

jar {
    manifest {
        attributes(
                'Main-Class': "${peachMainClass}"
        )
    }
}

// Een 'fat' JAR is een JAR (Java Executable, soort van EXE) die alle libraries
// bevat die we in dit project gebruiken. Zo hoeven we dus maar een enkel bestand
// te shippen.
task fatJar(type: Jar) {
    manifest.attributes['Main-Class'] = "${peachMainClass}"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

sourceSets.main.java.srcDir "$buildDir/generated/java" // add the extra source dir
compileJava.dependsOn generateJava // wire the generateJava task into the DAG
